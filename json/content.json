{
	"personal": {
		"ids": [ "name", "profession", "bio" ],
		"name": "Matthew Hansen",
		"profession": "Game Programmer",
		"bio": "Thanks for taking the time to look at my portfolio! I am a professional software engineer with 10+ years of experience architecting high-performance software systems. The majority of my experience is in three areas: the video game industry on 2D and 3D games, DOD contracting on real-time vehicle simulations and maintenance programs, and working with personal clients on emerging technologies including eye-tracking, haptic feedback hardware, and AR/VR applications. My diverse experience has made me an expert at efficiently learning a wide variety of platforms and libraries with a keen eye for thoroughly examining specialized topics."
	},
	"projects": [
		{
			"ids": [ "t_archer", "d_archer", "tag_archer" ],
			"title": "Archer, P.I.",
			"description": "<p><b>Platforms:</b> Android, iOS</br><b>Team Size:</b> 7-10<br/><b>Studio:</b> Floyd County Productions / FX Networks<br/><b>Release:</b> 2017<br/><b>Engine/Tools:</b> Unity, Vuforia<br/><b>Languages:</b> C#, Java, Objective-C<br/><b>Role:</b> Programmer<br/><b>Time on project:</b> 6 months</p><h3>Overview</h3><p>Archer, P.I. is an Augmented Reality app designed to interface directly with the TV show, allowing the player to literally grab an item from an episode and interact with it while immersed in rich secondary narrative that compliments developments in the show. The app seamlessly weaves animated video storylines with graphical hints while leveraging game mechanics to surprise and delight fans as they solve a new case for each episode of the show.</p><video poster=\"img/archer/video-poster.jpg\" preload=\"auto\" controls><source src=\"vid/archer-award-pitch.mp4\" type=\"video/mp4\"></video><h3>OS Permissions</h3><p>I worked on the permission system between our game engine - Unity, the AR middleware - Vuforia, and operating systems - Android and iOS.</p><p>This was a bit of a challenge because we needed to request camera permissions from our users before the engine initialized, but depending on the operating system and its specific version, the user may not get a permission prompt until the app is launched. The problem was magnified, particularly on Android devices, due to market fragmentation in 2017.</p><img src=\"img/archer/android-dashboard.png\"/><p>Each version of the Android operating system had a different philosophy on how to manage permissions and privacy settings. For example, some would allow the use of a camera only when the app was open, some expected 24/7 access to the permission, and others could be on a case by case basis.</p><p>The solution I chose was to create a native Android activity in Java to request permissions from the user in the manner appropriate for their OS version, as well as user preference in more modern versions of Android. This activity then launched our engine, initialized our middleware, loaded our assets, and then brought the user to the title screen of our app.</p><img src=\"img/archer/permission-flowchart.png\"/><p>On the iOS side, device fragmentation and permission standards were more consistent - making it much easier to manage, but we still needed to make sure permissions remained active while our systems initialization was in process. I used a similar solution to develop a native iOS app for phones and tablets using Objective-C and integrated the OSX build process into our team’s existing deployment pipeline for convenient iterative builds on each platform. This allowed us to keep our testing team up-to-date with new gameplay features, performance metrics, asset quality checks, and permission verification across all supported devices.</p>",
			"tags": [ "Unity", "C#", "Augmented Reality", "Gameplay", "User Interface", "iOS / Android", "Database", "Achievements" ]
		},
		{
			"ids": [ "t_chan", "d_chan", "tag_chan" ],
			"title": "The Channeler",
			"description": "The Channeler is a PC game that utilizes the Tobii EyeX eye-tracking hardware. We are experimenting with this new technology in games and striving to create a unique and immersive experience. As a part of a team of 12 people, I have worked on AI components for NPC companions and enemies, assisted in engine and tool creation, build automation and installation, general gameplay, prototyping, and analytics.",
			"tags": [ "Unreal Engine 4", "C++", "Blueprint", "Tobii EyeX", "Artificial Intelligence", "Gameplay / Prototyping", "Analytics", "Build Pipeline" ]
		},
		{
			"ids": [ "t_brain", "d_brain", "tag_brain" ],
			"title": "Brain Maxx",
			"description": "Brain Maxx is a game that relies on gathering neurofeedback data in real-time in the form of EEG waves and encourages the player to enter a focused state. The player is initially represented as a small object traveling down a cylindrical space. By monitoring spontaneous electrical activity while engaged in the game, we reward the player when they remain in their focused state by accumulating additional objects that form into a ship. If the player gets either too relaxed or too energized, they will fall out of this reward state. If a player is unable to quickly re-enter a focused state the ship will begin to disintegrate and audio will fade. We hope to gain a better understanding of how games can impact a user's level of focus in real-time and see if repetitive exposure can assist in consciously managing it.",
			"tags": [ "C#", "Unity", "Muse", "EEGer", "Gameplay", "Audio", "Experimental" ]
		},
		{
			"ids": [ "t_engine", "d_engine", "tag_engine" ],
			"title": "Data-Driven Game Engine",
			"description": "As part of my graduate coursework at FIEA, I have been writing a custom game engine from scratch in C++. This includes re-creating fundamental data structures such as a singly-linked list, vector, stack, and hashmap. In addition to compile-time containers, I have been working on creating a script-like system to construct custom data types during run-time. The components that make up this system are datums (to store either individual data or arrays of homogeneous data with Run-Time Type Information support), a scope (which is just as it sounds, it associates other datums and scopes with a name, then encases it), and finally attributed (that links a script-like language to native C++ code). An event-driven XML parsing system is used to assist in the creation of this custom data system at run-time.",
			"tags": [ "C++", "Data Structures", "RTTI", "Data Driven System", "Chain of Responsibility", "XML Parsing", "Factory Pattern" ]
		},
		{
			"ids": [ "t_breakout", "d_breakout", "tag_breakout" ],
			"title": "Motorola 68k Breakout",
			"description": "This version of Breakout was written in Motorola 68000 (32-bit assembly). One of the largest challenges involved optimizing the application to run through a simulator in a Windows environment. Rendering in particular was too slow to be able to redraw bitmaps on the screen even when swapping buffers in a double buffered system. In order to work around this limitation, an invalid rectangle was calculated each frame an entity moved. This allowed the renderer to only re-draw areas of the screen where another sprite was overlapping another sprite or background image on the previous frame. Other challenges included using fixed point notation since the hardware did not support floating point operations, creating a 7-segment LED for the life counter to avoid unnecessarily loading additional sprites and fonts, and maintaining the user input buffer in the cache to ensure the game was responsive to the player’s input.",
			"tags": [ "Assembly", "Motorola 68000", "Low-level Optimization", "Fixed Point" ]
		},
		{
			"ids": [ "t_nyah", "d_nyah", "tag_nyah" ],
			"title": "Nyah",
			"description": "A PC game developed by a team of two. Originally written in C++ and OpenGL, it was later ported to the original Xbox. Some of the more notable technical challenges included converting from OpenGL to DirectX, handling new input devices, and managing requirements for audio and graphic assets across platforms.",
			"tags": [ "C/C++", "Cross Platform", "PC", "Xbox", "OpenGL", "DirectX" ]
		}
	]
}